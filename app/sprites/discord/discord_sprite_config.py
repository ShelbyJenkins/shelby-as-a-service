from typing import Optional, List
from services.config_service import ConfigService

class DiscordSpriteConfig:
    def __init__(self, moniker, log_service):
        ### Set these to your needs ###
        # Requests method - at least one is required
        self.manual_requests_enabled: bool = True  # Manual allows for @discord-sprite engagement
        self.auto_response_enabled: bool = False  # Auto responds automatically to relevant questions
        self.auto_response_cooldown: int = 10 # Time in minutes to cooldown between auto-responding to specific users
        self.auto_respond_in_threads: bool = False # Auto respond to messages from users in their conversations with sprite
        # Channel selection - at least one is required
        # Respond in all channels
        self.all_channels_enabled: bool = False
        if self.all_channels_enabled:
            self.all_channels_excluded_channels: Optional[List[int]] = '1,1' # Exclude channels to reply in
        # Respond in specific channels
        self.specific_channels_enabled: bool = True
        if self.specific_channels_enabled:
            self.specific_channel_ids: str = '1110379342745321472,1128776389227720795,1' # Requires at least one channel if enabled
        self.user_daily_token_limit: int = 30000
        # Content
        self.welcome_message: str = '"ima tell you about the {}."'
        self.short_message: str = '"<@{}>, brevity is the soul of wit, but not of good queries. Please provide more details in your request."'
        self.message_start: str = '"Running request... relax, chill, and vibe a minute."'
        self.message_end: str = '"Generated by: gpt-4. Memory not enabled. Has no knowledge of past or current queries. For code see https://github.com/ShelbyJenkins/shelby-as-a-service."'
        ### Don't touch anything below here ###
        self.bot_token: str = ''
        self.moniker: str = moniker
        self.platform: str = 'discord'
        # Perform some checks to ensure proper configuration
        if not self.manual_requests_enabled and not self.auto_response_enabled:
            log_service.print_log_error('An error occurred in DiscordSpriteConfig: if not self.manual_requests_enabled and not self.auto_response_enabled:')
        
        if self.auto_response_enabled and self.auto_response_cooldown == None:
            log_service.print_log_error('An error occurred in DiscordSpriteConfig: if self.auto_response_enabled and self.auto_response_cooldown == None:')
        
        if self.all_channels_enabled == self.specific_channels_enabled:
            log_service.print_log_error('An error occurred in DiscordSpriteConfig: if self.all_channels_enabled == self.specific_channels_enabled:')
            
        if self.specific_channels_enabled and not self.specific_channel_ids:
            log_service.print_log_error('An error occurred in DiscordSpriteConfig: if self.specific_channels_enabled and not self.specific_channel_ids:')
            
    def load_config(self, log_service):
        # Populates variables from .env or from container env
        config_service = ConfigService()
        config_service.load_env_config(self, log_service)
        # Destructuring strings
        if hasattr(self, 'all_channels_excluded_channels') and isinstance(self.all_channels_excluded_channels, str):
            self.all_channels_excluded_channels: Optional[List[int]] = [int(id) for id in self.all_channels_excluded_channels.split(',') if id]
        if hasattr(self, 'specific_channel_ids') and isinstance(self.specific_channel_ids, str):
            self.specific_channel_ids: Optional[List[int]] = [int(id) for id in self.specific_channel_ids.split(',') if id]
        # "" are required for formating in github actions workflow, but they need to be removed for use by discord sprite
        self.welcome_message: str = self.welcome_message.strip('"')
        self.short_message: str = self.short_message.strip('"')
        self.message_start: str = self.message_start.strip('"')
        self.message_end: str = self.message_end.strip('"')
        
    def create_sprite_deployment(self, deployment_config, log_service):
        # Populates variables from deployment_config.yaml
        config_service = ConfigService()
        config_service.load_deployment_config(self, deployment_config, log_service)
        # make lists and strings to actions workflow friendly
        if hasattr(self, 'all_channels_excluded_channels') and isinstance(self.all_channels_excluded_channels, list):
            self.all_channels_excluded_channels: str = f"'{self.all_channels_excluded_channels}'"
        if hasattr(self, 'specific_channel_ids') and isinstance(self.specific_channel_ids, list):
            self.specific_channel_ids: str = f"'{self.specific_channel_ids}'"
        # "" are required for formating in github actions workflow
        self.welcome_message: str = f"'{self.welcome_message}'"
        self.short_message: str = f"'{self.short_message}'"
        self.message_start: str = f"'{self.message_start}'"
        self.message_end: str = f"'{self.message_end}'"