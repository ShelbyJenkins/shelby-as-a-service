{"metadata": {"tag": "Custodial managed wallets", "tag_number": 0, "doc_number": 159, "operation_id": "custodialtransfermanagedaddress", "doc_url": "https://apidoc.tatum.io/tag/Custodial managed wallets#operation/custodialtransfermanagedaddress", "server_url": "https://api.tatum.io/v3/custodial/transaction"}, "content": "path /v3/custodial/transaction\noperationId CustodialTransferManagedAddress\nsummary Sign and transfer using managed address\ndescription 2 credits per API call additional credits are charged for each gas covered operation\nSign transaction and transfer assets from a custodial managed address\nSupported chains\n\nSolana\n\n\nLogic for Solana\nIn Solana its possible to cover the fees connected to any arbitrary transaction by a third party\nTatum can cover these fees for any transaction on the Solana blockchain  transfer of SOL SPL tokens minting or transferring NFTs or invoking programs\nIn order to do this Tatum fee address must be used as a feePayer address during transaction creation\n\nMainnet addressDevnet address\nAddressDSpHmb7hLnetoybammcJBJiyqMVR3pDhCuW6hqVg9eBFDSpHmb7hLnetoybammcJBJiyqMVR3pDhCuW6hqVg9eBF\n\nOnce transaction is constructed using Solana SDK it can be serialized to HEX data string which is then passed to the API and signed\nTransaction could require multiple private keys for signing  fee payer sender of the SOL assets minting key during NFT mint operation etc\nSome of the keys are used in Tatum  fee payer or in case of managed wallet holding SOL assets the key of that managed wallet  those must be referenced in a list of walletIds to be used\nFor external keys which are not managed by Tatum those could either sign the transaction before its serialization or could be passed to the API in its raw form  this is OK only for keys which could be exposed and there is no harm of loosing assets on them\nHow to partially sign the transaction could be found here\nFee payer key is used by default doesnt have to be mentioned in the list of wallets used for signing\nExamples of different transaction payloads\n1 Send SOL from account HrJtQTy2RW9c6y41RvN8x3bEiD6Co74AuhER2MGCpa58 to FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU\n\nimport  LAMPORTSPERSOL PublicKey SystemProgram Transaction Connection  from solana/web3js\n\nconst connection  new Connectionhttps//apitatumio/v3/blockchain/node/SOL\nconst from  HrJtQTy2RW9c6y41RvN8x3bEiD6Co74AuhER2MGCpa58\nconst to  FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU\nconst amount  0000001\nconst devnetfeepayer  5zPr5331CtBjgVeLedhmJPEpFaUsorLCnb3aCQPsUc9w\nconst fromPubkey  new PublicKeyfrom\nconst transaction  new Transaction feePayer new PublicKeydevnetfeepayer \ntransactionadd\n  SystemProgramtransfer\n    fromPubkey fromPubkey\n    toPubkey new PublicKeyto\n    lamports new BigNumberamountmultipliedByLAMPORTSPERSOLtoNumber\n  \n\nconst  blockhash lastValidBlockHeight   await connectiongetLatestBlockhashfinalized\ntransactionrecentBlockhash  blockhash\ntransactionlastValidBlockHeight  lastValidBlockHeight\ntransactionpartialSignsigners\nreturn transactionserialize requireAllSignatures false toStringhex\n\nFor the above example developer have 2 options how to sign transaction  if the sender address HrJtQTy2RW9c6y41RvN8x3bEiD6Co74AuhER2MGCpa58 is managed using a Tatum managed wallet with id 0b1eae3d252049038bbf5dec3ad2a5d4\nthe final payload to the custodial/transaction endpoint should look like this\n\n\n  chain SOL\n  txData 020001044a22af97a838a504e6f7c0b18d779afcea612da50794cc1dac641861fc1ab14afa5cacaf91c298694e64bb5496916c3c68a32affb92d4bcd2736fbb00169d57bd840de2a454960308f688cd3ee308c1fa01ecfa0b03770aaaf3b52d71d46c31d000000000000000000000000000000000000000000000000000000000000000060d38e0da20dc5900b7e902c918eae6a95e2d90af154b53a422f4ab26b050f4f01030201020c02000000e803000000000000\n  walletIds \n    \n      key 0b1eae3d252049038bbf5dec3ad2a5d4\n      type MANAGED\n    \n  \n\n\nIf the sender address is not managed the transaction could be signed with the private key of that address before the serialization and the payload will look like this\n\n\n  chain SOL\n  txData 020001044a22af97a838a504e6f7c0b18d779afcea612da50794cc1dac641861fc1ab14afa5cacaf91c298694e64bb5496916c3c68a32affb92d4bcd2736fbb00169d57bd840de2a454960308f688cd3ee308c1fa01ecfa0b03770aaaf3b52d71d46c31d000000000000000000000000000000000000000000000000000000000000000060d38e0da20dc5900b7e902c918eae6a95e2d90af154b53a422f4ab26b050f4f01030201020c02000000e803000000000000\n  walletIds\nTransferManagedAddress\ntype object\nproperties\nchain\ntype string\ndescription Blockchain to work on\ntxData\ntype string\nminLength 1\nmaxLength 500000\ndescription Hex serialized data representing transaction which should be signed using one of the managed wallets\nwalletIds\ntype array\nitems\ntype object\nrequired\nkey\ntype\nproperties\nkey\ntype string\ndescription Wallet ID of wallet which should be used for signing In case of RAW type of the wallet this represents the private key which will be used for signatures\ntype\ntype string\ndescription Type of the wallet to be used  RAW represents native private key MANAGED represents ID of the managed wallet\nrequired\nchain\ntxData\nwalletIds\nresponses\n200\nTransactionHash\ntype object\ntxId\ndescription The hash ID of the transaction\ntype string\nrequired\ntxId\ndescription OK"}