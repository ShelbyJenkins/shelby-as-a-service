# region

import asyncio
import time
from collections import defaultdict
from typing import Any, Dict, Generator, List, Optional, Type, Union

import gradio as gr
import interfaces.webui.gradio_helpers as GradioHelper
from agents.ceq.ceq_agent import CEQAgent
from agents.vanillallm.vanillallm_agent import VanillaLLM
from agents.web.web_agent import WebAgent
from app_config.app_base import AppBase
from interfaces.webui.gradio_ui import GradioUI
from pydantic import BaseModel

# endregion


class WebUISprite(AppBase):
    MODULE_NAME: str = "webui_sprite"
    MODULE_UI_NAME: str = "webui_sprite"
    REQUIRED_MODULES: List[Type] = [VanillaLLM]
    # REQUIRED_MODULES: List[Type] = [VanillaLLM, CEQAgent, WebAgent]

    class ModuleConfigModel(BaseModel):
        default_local_app_enabled: bool = False
        default_local_app_name: Optional[str] = None
        local_message_start: str = "Running request... relax, chill, and vibe a minute."
        local_message_end: str = "Generated by: gpt-4. Memory not enabled. Has no knowledge of past or current queries. For code see https://github.com/shelby-as-a-service/shelby-as-a-service."
        current_agent_ui_name: str = "VanillaLLM Agent"

        class Config:
            extra = "ignore"

    config: ModuleConfigModel

    def __init__(self, config_file_dict={}, **kwargs):
        # super().__init__()
        module_config_file_dict = config_file_dict.get(self.MODULE_NAME, {})
        self.config = self.ModuleConfigModel(**{**kwargs, **module_config_file_dict})

        self.vanillallm_agent = VanillaLLM(module_config_file_dict)
        self.required_module_instances = self.get_list_of_module_instances(
            self, self.REQUIRED_MODULES
        )

        self.gradio_ui = GradioUI(self)

    def _log(self, message):
        self.log.print_and_log_gradio(message)
        gr.Info(message)

    def run_sprite(self):
        self.gradio_ui.create_gradio_interface()
