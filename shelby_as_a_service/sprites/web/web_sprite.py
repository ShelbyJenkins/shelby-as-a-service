# region

import time
from typing import Any, Dict, Generator, List, Optional, Type, Union

import gradio as gr
import sprites.web.gradio_helpers as GradioHelper
from agents.ceq_agent import CEQAgent
from agents.vanillm_agent import VanillaLLM
from agents.web_agent import WebAgent
from pydantic import BaseModel
from services.llm_service import LLMService
from services.providers.llm_openai import OpenAILLM
from sprites.sprite_base import SpriteBase
from sprites.web.chat_ui import ChatUI
from sprites.web.gradio_themes import AtYourServiceTheme
from sprites.web.settings_panel import SettingsPanel

# endregion


class WebSprite(SpriteBase):
    SPRITE_NAME: str = "web_sprite"
    SPRITE_UI_NAME: str = "web_sprite"
    AVAILABLE_AGENTS: List[Type] = [VanillaLLM, CEQAgent, WebAgent]

    class SpriteConfigModel(BaseModel):
        default_local_app_enabled: bool = False
        default_local_app_name: Optional[str] = None
        local_message_start: str = "Running request... relax, chill, and vibe a minute."
        local_message_end: str = "Generated by: gpt-4. Memory not enabled. Has no knowledge of past or current queries. For code see https://github.com/shelby-as-a-service/shelby-as-a-service."
        current_feature_ui_name: str = "ceq_agent"

    def __init__(self):
        """ """
        super().__init__()

        self.ui = {}
        self.ui["ui_shared"] = {}
        self.ui["ui_shared"]["update_settings_file"] = False

        self.ui["features"] = {}

        for agent in self.AVAILABLE_AGENTS:
            name = GradioHelper.get_class_name(agent)
            self.ui["features"][name] = {}

    def create_interface(self):
        """Creates gradio app."""
        with gr.Blocks(
            theme=AtYourServiceTheme(),
            css=AtYourServiceTheme.css,
        ) as local_client:
            components = {}
            with gr.Row(elem_id="main_row"):
                with gr.Column(elem_id="settings_panel_col"):
                    SettingsPanel(self).create_settings_panel()
                with gr.Column(elem_id="chat_ui_panel_col"):
                    ChatUI(self).create_chat_ui()

            SettingsPanel(self).create_feature_nav_event()
            local_client.queue()
            local_client.launch()

        # Outputs agent_select_status_message to status bar when agent selected
        # self.components["feature_nav_radio"].change(
        #     fn=self.agent_select_status_message,
        #     inputs=self.components["chat_tab_agent_dropdown"],
        #     outputs=self.components["chat_tab_status_text"],
        # )

    def run_chat(
        self, *comps_state
    ) -> Union[Generator[List[str], None, None], List[str]]:
        ui_state = GradioHelper.comp_values_to_dict(self.ui, *comps_state)
        documents = None

        agent = self.get_selected_agent(ui_state["chat_tab_agent_dropdown"])
        if agent is None:
            raise gr.Error("Bad value for chat_tab_agent_dropdown!")
        if agent.AGENT_NAME == "web_agent":
            if content := ui_state["web_data_content"]:
                documents = content
            else:
                raise gr.Error("Bad value for web_data_content!")
        # try:
        if ui_state.get("stream_chat", False):
            yield from agent.create_streaming_chat(
                query=ui_state["input_chat_textbox"],
                user_prompt_template_path=None,
                documents=documents,
                llm_provider=ui_state["chat_llm_provider"],
                llm_model=ui_state["chat_llm_model"],
            )
            return None
        else:
            return agent.create_chat(
                query=ui_state["input_chat_textbox"],
                user_prompt_template_path=None,
                document=documents,
                llm_provider=ui_state["chat_llm_provider"],
                llm_model=ui_state["chat_llm_model"],
            )

        # except Exception as e:
        #     print(f"An error occurred: {str(e)}")
        #     raise gr.Error(f"Error: {e}") from e

    def load_single_website(self, *comps_state) -> List[str]:
        comps_state = GradioHelper.comp_values_to_dict(self.ui, *comps_state)

        return WebAgent(self).load_single_website(comps_state)

    def _log(self, message):
        self.log.print_and_log_gradio(message)
        gr.Info(message)

    def run_sprite(self):
        self.create_interface()
        while True:
            time.sleep(5)
            if self.ui["ui_shared"]["update_settings_file"]:
                self.ui["ui_shared"]["update_settings_file"] = False
                self.app.update_app_config_file_from_ui()
