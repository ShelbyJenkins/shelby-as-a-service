# region

from concurrent.futures import ThreadPoolExecutor
from typing import Any, Dict, List, Optional

import gradio as gr
import modules.utils.config_manager as ConfigManager
from agents.ceq_agent import CEQAgent
from agents.vanillm_agent import VanillaLLM
from agents.web_agent import WebAgent
from modules.utils.get_app import get_app
from sprites.web.chat_ui import ChatUI
from sprites.web.gradio_helpers import GRHelper
from sprites.web.gradio_themes import AtYourServiceTheme

# endregion


class WebSprite:
    sprite_name: str = "web_sprite"
    ui: Dict[Any, Any] = {}

    # default_deployment_enabled: bool = True
    # default_local_deployment_name: Optional[str] = None
    local_message_start: str = "Running request... relax, chill, and vibe a minute."
    local_message_end: str = "Generated by: gpt-4. Memory not enabled. Has no knowledge of past or current queries. For code see https://github.com/shelby-as-a-service/shelby-as-a-service."

    def __init__(self):
        """ """
        self.app = get_app()
        ConfigManager.setup_service_config(self)

        self.gr_helper = GRHelper(self)
        self.vanillallm_agent = VanillaLLM(self)
        self.web_agent = WebAgent(self)
        self.ceq_agent = CEQAgent(self)

    def create_interface(self):
        """Creates gradio app."""
        with gr.Blocks(theme=AtYourServiceTheme()) as local_client:
            with gr.Tab("Chat", elem_id="default-tab"):
                self.ui["chat_ui"] = ChatUI(self.gr_helper).create_ui()

            # with gr.Tab("Data Chat", elem_id="default-tab"):
            #     with gr.Tab("Context Enhanced Querying", elem_id="default-tab"):
            #         self.web_ui()
            #     with gr.Tab("Add Data", elem_id="default-tab"):
            #         # self.create_index_config()
            #         with gr.Tab("email", elem_id="default-tab"):
            #             pass
            #         with gr.Tab("local", elem_id="default-tab"):
            #             pass
            #         with gr.Tab("web", elem_id="default-tab"):
            #             pass

            # with gr.Tab("Build Bots and Websites", elem_id="default-tab"):
            #     self.web_ui()

            # with gr.Tab("Config", elem_id="default-tab"):
            #     self.web_ui()

            # create_index_ui(self)
            # create_web_settings_ui(self)
            local_client.queue()
            local_client.launch()

    def _log(self, message):
        self.log.print_and_log_gradio(message)
        gr.Info(message)

    def run_sprite(self):
        self.create_interface()
